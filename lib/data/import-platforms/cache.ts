"use server"

import { unstable_cache } from "next/cache"
import { prisma } from "@/lib/db"
import { CACHE_TAGS, REVALIDATE_TIME } from "@/lib/cache-helpers"

/**
 * ============================================
 * ÂØºÂÖ•Âπ≥Âè∞Êï∞ÊçÆÁºìÂ≠òÂ±ÇÔºàÁªü‰∏ÄÊï∞ÊçÆÊ∫êÔºâ
 * ============================================
 *
 * ‚ö†Ô∏è ËøôÊòØÂîØ‰∏ÄÊü•ËØ¢ÂØºÂÖ•Âπ≥Âè∞Êï∞ÊçÆÂ∫ìÁöÑÂú∞ÊñπÔºÅ
 * ÁºìÂ≠òÊâÄÊúâÂØºÂÖ•Âπ≥Âè∞ÈÖçÁΩÆÊï∞ÊçÆ
 *
 * ÁºìÂ≠òÁ≠ñÁï•Ôºö
 * - Êó∂Èó¥Ôºö24Â∞èÊó∂ÈáçÊñ∞È™åËØÅ
 * - ÂéüÂõ†ÔºöÂØºÂÖ•Âπ≥Âè∞ÈÖçÁΩÆÊûÅÂ∞ëÂèòÂåñ
 * - Êú∫Âà∂Ôºö‰ΩøÁî® unstable_cache ÊåÅ‰πÖÂåñÁºìÂ≠ò
 */

/**
 * ÂÜÖÈÉ®Êï∞ÊçÆÂ∫ìÊü•ËØ¢ÂáΩÊï∞ - Ëé∑ÂèñÊâÄÊúâÂØºÂÖ•Âπ≥Âè∞
 */
async function fetchImportPlatformsFromDB() {
  if (process.env.NODE_ENV === "development") {
    console.log(`[Cache] üíæ fetchImportPlatformsFromDB - ÊâßË°åÊï∞ÊçÆÂ∫ìÊü•ËØ¢`)
  }

  return await prisma.importPlatform.findMany({
    orderBy: [
      { sortOrder: "asc" },
      { createdAt: "desc" },
    ],
  })
}

/**
 * ÂÜÖÈÉ®Êï∞ÊçÆÂ∫ìÊü•ËØ¢ÂáΩÊï∞ - Ê†πÊçÆ slug Ëé∑ÂèñÂØºÂÖ•Âπ≥Âè∞
 */
async function fetchImportPlatformBySlugFromDB(slug: string) {
  if (process.env.NODE_ENV === "development") {
    console.log(`[Cache] üíæ fetchImportPlatformBySlugFromDB - slug: ${slug}`)
  }

  return await prisma.importPlatform.findUnique({
    where: { slug },
  })
}

/**
 * ÂÜÖÈÉ®Êï∞ÊçÆÂ∫ìÊü•ËØ¢ÂáΩÊï∞ - Ê†πÊçÆ ID Ëé∑ÂèñÂØºÂÖ•Âπ≥Âè∞
 */
async function fetchImportPlatformByIdFromDB(id: string) {
  if (process.env.NODE_ENV === "development") {
    console.log(`[Cache] üíæ fetchImportPlatformByIdFromDB - id: ${id}`)
  }

  return await prisma.importPlatform.findUnique({
    where: { id },
  })
}

/**
 * Ëé∑ÂèñÊâÄÊúâÂØºÂÖ•Âπ≥Âè∞ÔºàÁºìÂ≠òÁâàÊú¨Ôºâ
 */
export const getAllImportPlatforms = unstable_cache(
  async () => fetchImportPlatformsFromDB(),
  ["import-platforms-all"],
  {
    revalidate: REVALIDATE_TIME.VERY_LONG, // 24Â∞èÊó∂
    tags: [CACHE_TAGS.IMPORT_PLATFORMS],
  }
)

/**
 * Ê†πÊçÆ slug Ëé∑ÂèñÂØºÂÖ•Âπ≥Âè∞ÔºàÁºìÂ≠òÁâàÊú¨Ôºâ
 */
export const getImportPlatformBySlug = unstable_cache(
  async (slug: string) => fetchImportPlatformBySlugFromDB(slug),
  ["import-platform-by-slug"],
  {
    revalidate: REVALIDATE_TIME.VERY_LONG, // 24Â∞èÊó∂
    tags: [CACHE_TAGS.IMPORT_PLATFORMS],
  }
)

/**
 * Ê†πÊçÆ ID Ëé∑ÂèñÂØºÂÖ•Âπ≥Âè∞ÔºàÁºìÂ≠òÁâàÊú¨Ôºâ
 */
export const getImportPlatformById = unstable_cache(
  async (id: string) => fetchImportPlatformByIdFromDB(id),
  ["import-platform-by-id"],
  {
    revalidate: REVALIDATE_TIME.VERY_LONG, // 24Â∞èÊó∂
    tags: [CACHE_TAGS.IMPORT_PLATFORMS],
  }
)
